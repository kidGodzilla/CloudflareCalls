!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).CloudflareCalls=t()}(this,(function(){"use strict";class e{constructor(t={}){this.backendUrl=t.backendUrl||"",this.websocketUrl=t.websocketUrl||"",this.debug=t.debug||!1,this.token=null,this.roomId=null,this.sessionId=null,this.userId=this._generateUUID(),this.userMetadata={},this.localStream=null,this.peerConnection=null,this.ws=null,this._onParticipantJoinedCallback=null,this._onParticipantLeftCallback=null,this._onRemoteTrackCallback=null,this._onRemoteTrackUnpublishedCallback=null,this._onTrackStatusChangedCallback=null,this._onDataMessageCallback=null,this._onConnectionStatsCallback=null,this._wsMessageHandlers=new Set,this.pulledTracks=new Map,this.pollingInterval=null,this.availableAudioInputDevices=[],this.availableVideoInputDevices=[],this.availableAudioOutputDevices=[],this.currentAudioOutputDeviceId=null,this._renegotiateTimeout=null,this.publishedTracks=new Set,this.midToSessionId=new Map,this.midToTrackName=new Map,this._onRoomMetadataUpdatedCallback=null,this.pendingQualitySettings=null,this.mediaQuality=e.QUALITY_PRESETS.medium_16x9_md,this.QUALITY_PRESETS=e.QUALITY_PRESETS,this.statsInterval=null,this.previousStats=null,this.statsMonitoringState="stopped"}_log(...e){this.debug&&console.log("[CloudflareCalls]",...e)}_warn(...e){this.debug&&console.warn("[CloudflareCalls]",...e)}_error(...e){console.error("[CloudflareCalls]",...e)}setDebugMode(e){this.debug=Boolean(e)}async _fetch(e,t={}){t.headers=t.headers||{},this.token&&(t.headers.Authorization=`Bearer ${this.token}`);try{const a=await fetch(e,t);return a.ok||this._warn(`HTTP error! status: ${a.status}`),a}catch(t){return this._warn(`Fetch error for ${e}:`,t),!1}}onRemoteTrack(e){this._onRemoteTrackCallback=e}onRemoteTrackUnpublished(e){this._onRemoteTrackUnpublishedCallback=e}onDataMessage(e){this._onDataMessageCallback=e}onParticipantJoined(e){this._onParticipantJoinedCallback=e}onParticipantLeft(e){this._onParticipantLeftCallback=e}onTrackStatusChanged(e){this._onTrackStatusChangedCallback=e}onWebSocketMessage(e){return this._wsMessageHandlers.add(e),()=>this._wsMessageHandlers.delete(e)}setToken(e){this.token=e}onRoomMetadataUpdated(e){this._onRoomMetadataUpdatedCallback=e}setUserMetadata(e){this.userMetadata=e,this._updateUserMetadataOnServer()}getUserMetadata(){return this.userMetadata}async _updateUserMetadataOnServer(){if(this.roomId&&this.sessionId)try{const e=`${this.backendUrl}/api/rooms/${this.roomId}/metadata`;(await this._fetch(e,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.userMetadata)})).ok?this._log("User metadata updated on server."):this._error("Failed to update user metadata on server.")}catch(e){throw this._error("Error updating user metadata:",e),e}else this._warn("Cannot update metadata before joining a room.")}async createRoom(e={}){const t=await this._fetch(`${this.backendUrl}/api/rooms`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((e=>e.json()));return this.roomId=t.roomId,t}async joinRoom(e,t={}){this.roomId=e;const a=await this._fetch(`${this.backendUrl}/api/rooms/${e}/join`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:this.userId,metadata:this.userMetadata})}).then((e=>e.json()));if(await this._initWebSocket(),!a.sessionId)throw new Error("Failed to join room or retrieve sessionId");this.sessionId=a.sessionId,this.pulledTracks.set(this.sessionId,new Set),this.peerConnection=await this._createPeerConnection(),this.localStream||(this.localStream=await navigator.mediaDevices.getUserMedia({video:!0,audio:!0}),this._log("Acquired local media")),await this._publishTracks();const i=a.otherSessions||[];for(const e of i){this.pulledTracks.set(e.sessionId,new Set);for(const t of e.publishedTracks||[])await this._pullTracks(e.sessionId,t)}this._log("Joined room",e,"my session:",this.sessionId),this.setUserMetadata(t),this._startPolling()}async _cleanupEndedTracks(){if(this.localStream)for(const e of this.localStream.getTracks())"ended"===e.readyState&&(this.localStream.removeTrack(e),e.stop());this.localStream&&!this.localStream.getTracks().length&&(this.localStream=null)}async leaveRoom(){if(!this.roomId||!this.sessionId)return;const e=this.peerConnection.getSenders();e&&e.length&&await this.unpublishAllTracks();try{await this._fetch(`${this.backendUrl}/api/rooms/${this.roomId}/leave`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sessionId:this.sessionId})})}catch(e){this._warn("Error leaving room:",e)}this.ws&&(this.ws.close(),this.ws=null),this.peerConnection&&(this.peerConnection.close(),this.peerConnection=null),await this._cleanupEndedTracks(),this._log("Left room, closed PC & WS"),this.roomId=null,this.sessionId=null,this.pulledTracks.clear(),this.midToSessionId.clear(),this.midToTrackName.clear(),this.publishedTracks.clear()}async publishTracks(){if(!this.localStream)return this._warn("No local media stream to publish.");await this._publishTracks()}async _renegotiate(){this.peerConnection&&(this._renegotiateTimeout&&clearTimeout(this._renegotiateTimeout),this._renegotiateTimeout=setTimeout((async()=>{try{this._log("Starting renegotiation process...");const e=await this.peerConnection.createAnswer();this._log("Created renegotiation answer:",e.sdp),await this.peerConnection.setLocalDescription(e);const t=`${this.backendUrl}/api/rooms/${this.roomId}/sessions/${this.sessionId}/renegotiate`,a={sdp:e.sdp,type:e.type};this._log(`Sending renegotiate request to ${t} with body:`,a);const i=await this._fetch(t,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then((e=>e.json()));if(i.errorCode)return void this._warn("Renegotiation failed:",i.errorDescription);await this.peerConnection.setRemoteDescription(i.sessionDescription),this._log("Renegotiation successful. Applied SFU response.")}catch(e){this._error("Error during renegotiation:",e)}}),500))}async updatePublishedTracks(){if(!this.peerConnection)return this._warn("PeerConnection is not established.");const e=this.peerConnection.getSenders();for(const t of e)this.peerConnection.removeTrack(t);await this._publishTracks()}async _publishTracks(){if(!this.localStream||!this.peerConnection)return;const e=[];for(const t of this.localStream.getTracks()){if(this.publishedTracks.has(t.id))continue;if("live"!==t.readyState)continue;const a=this.peerConnection.addTransceiver(t,{direction:"sendonly"});if(this.pendingQualitySettings&&"video"===t.kind){const e=a.sender.getParameters();e.encodings=[{maxBitrate:this.pendingQualitySettings.video.maxBitrate}],a.sender.setParameters(e)}e.push(a),this.publishedTracks.add(t.id)}if(0===e.length)return;const t=await this.peerConnection.createOffer();this._log("SDP Offer:",t.sdp),await this.peerConnection.setLocalDescription(t);const a=e.map((({sender:e,mid:t})=>({location:"local",mid:t,trackName:e.track.id}))),i={offer:{sdp:t.sdp,type:t.type},tracks:a,metadata:this.userMetadata},s=`${this.backendUrl}/api/rooms/${this.roomId}/sessions/${this.sessionId}/publish`,o=await this._fetch(s,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)}).then((e=>e.json()));if(o.errorCode)return void this._error("Publish error:",o.errorDescription);const n=o.sessionDescription;await this.peerConnection.setRemoteDescription(n),this._log("Publish => success. Applied SFU answer.")}async _pullTracks(e,t){this._log(`Pulling track '${t}' from session ${e}`);const a=`${this.backendUrl}/api/rooms/${this.roomId}/sessions/${this.sessionId}/pull`,i={remoteSessionId:e,trackName:t},s=await this._fetch(a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)}).then((e=>e.json()));if(s.errorCode)this._error("Pull error:",s.errorDescription);else{if(s.requiresImmediateRenegotiation){this._log("Pull => requires renegotiation");const a=new Set;s.sessionDescription.sdp.split("\n").forEach((i=>{if(i.startsWith("a=mid:")){const s=i.split(":")[1].trim();a.add(s),this.midToSessionId.set(s,e),this.midToTrackName.set(s,t),this._log("Pre-mapped MID:",{mid:s,sessionId:e,trackName:t})}})),await this.peerConnection.setRemoteDescription(s.sessionDescription);const i=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(i);this.peerConnection.getTransceivers().forEach((t=>{t.mid&&a.has(t.mid)&&this._log("Verified MID mapping:",{mid:t.mid,sessionId:e,direction:t.direction})})),await this._fetch(`${this.backendUrl}/api/rooms/${this.roomId}/sessions/${this.sessionId}/renegotiate`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({sdp:i.sdp,type:i.type})})}this._log(`Pulled trackName="${t}" from session ${e}`),this._log("Current MID mappings:",Array.from(this.midToSessionId.entries())),this.pulledTracks.has(e)||this.pulledTracks.set(e,new Set),this.pulledTracks.get(e).add(t)}}async _attemptIceServersUpdate(){let e=[{urls:"stun:stun.cloudflare.com:3478"}];try{const t=await this._fetch(`${this.backendUrl}/api/ice-servers`);if(!t.ok)return this._warn(`Failed to fetch ICE servers: ${t.status} ${t.statusText}`),!1;const a=await t.json();if(!a.iceServers||!Array.isArray(a.iceServers))return e;e=a.iceServers.map((e=>{const t={urls:e.urls};return e.username&&e.credential&&(t.username=e.username,t.credential=e.credential),t})),this._log("Fetched ICE servers:",e)}catch(e){return this._warn("Error fetching ICE servers:",e),!1}}async _createPeerConnection(){let e=await this._attemptIceServersUpdate()||[{urls:"stun:stun.cloudflare.com:3478"}];const t=new RTCPeerConnection({iceServers:e,bundlePolicy:"max-bundle",sdpSemantics:"unified-plan"});return t.onicecandidate=e=>{e.candidate?this._log("New ICE candidate:",e.candidate.candidate):this._log("All ICE candidates have been sent")},t.oniceconnectionstatechange=()=>{this._log("ICE Connection State:",t.iceConnectionState),"disconnected"!==t.iceConnectionState&&"failed"!==t.iceConnectionState||this.leaveRoom()},t.onconnectionstatechange=()=>{this._log("Connection State:",t.connectionState),"connected"===t.connectionState?this._log("Peer connection fully established"):"disconnected"!==t.connectionState&&"failed"!==t.connectionState||(this._log("Peer connection disconnected or failed"),this.leaveRoom())},t.ontrack=e=>{if(this._log("ontrack event:",{kind:e.track.kind,webrtcTrackId:e.track.id,mid:e.transceiver?.mid}),this._onRemoteTrackCallback){const t=e.transceiver?.mid,a=this.midToSessionId.get(t),i=this.midToTrackName.get(t);if(this._log("Track mapping lookup:",{mid:t,sessionId:a,trackName:i,webrtcTrackId:e.track.id,availableMappings:{sessions:Array.from(this.midToSessionId.entries()),tracks:Array.from(this.midToTrackName.entries())}}),!a)return this._warn("No sessionId found for mid:",t),this.pendingTracks||(this.pendingTracks=[]),void this.pendingTracks.push({evt:e,mid:t});const s=e.track;s.sessionId=a,s.mid=t,s.trackName=i,this._log("Sending track to callback:",{webrtcTrackId:s.id,trackName:s.trackName,sessionId:s.sessionId,mid:s.mid}),this._onRemoteTrackCallback(s)}},t}async _initWebSocket(){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return new Promise(((e,t)=>{this.ws=new WebSocket(this.websocketUrl),this.ws.onopen=()=>{this._log("WebSocket open"),this.ws.send(JSON.stringify({type:"join-websocket",payload:{roomId:this.roomId,userId:this.userId,token:this.token}})),e()},this.ws.onmessage=e=>{try{const t=JSON.parse(e.data);switch(this._log("WebSocket message received:",t),t.type){case"participant-joined":this._onParticipantJoinedCallback&&this._onParticipantJoinedCallback(t.payload);break;case"participant-left":this._onParticipantLeftCallback&&this._onParticipantLeftCallback(t.payload);break;case"track-published":this._onRemoteTrackCallback&&this._onRemoteTrackCallback(t.payload);break;case"track-unpublished":this._onRemoteTrackUnpublishedCallback&&this._onRemoteTrackUnpublishedCallback(t.payload.sessionId,t.payload.trackName);break;case"track-status-changed":this._onTrackStatusChangedCallback&&this._onTrackStatusChangedCallback(t.payload);break;case"data-message":this._onDataMessageCallback&&this._onDataMessageCallback(t.payload);break;case"room-metadata-updated":this._onRoomMetadataUpdatedCallback&&this._onRoomMetadataUpdatedCallback(t.payload);break;default:this._log("Unhandled message type:",t.type)}this._wsMessageHandlers.forEach((e=>e(t)))}catch(e){this._error("Error processing WebSocket message:",e)}},this.ws.onerror=e=>{this._error("WebSocket error:",e),t(e)},this.ws.onclose=()=>{this._log("WebSocket connection closed")}}))}_startPolling(){this.pollingInterval=setInterval((async()=>{if(this.roomId)try{const e=(await this._fetch(`${this.backendUrl}/api/rooms/${this.roomId}/participants`).then((e=>e.json()))).participants||[];for(const t of e){const{sessionId:e,publishedTracks:a}=t;if(e!==this.sessionId){this.pulledTracks.has(e)||this.pulledTracks.set(e,new Set);for(const t of a)this.pulledTracks.get(e).has(t)||(this._log(`[Polling] New track detected: ${t} from session ${e}`),await this._pullTracks(e,t))}}}catch(e){this._error("Polling error:",e)}}),1e4)}async getAvailableDevices(){const e=await navigator.mediaDevices.enumerateDevices();return this.availableAudioInputDevices=e.filter((e=>"audioinput"===e.kind)),this.availableVideoInputDevices=e.filter((e=>"videoinput"===e.kind)),this.availableAudioOutputDevices=e.filter((e=>"audiooutput"===e.kind)),{audioInput:this.availableAudioInputDevices,videoInput:this.availableVideoInputDevices,audioOutput:this.availableAudioOutputDevices}}async selectAudioInputDevice(e){if(!e)return void this._warn("No deviceId provided for audio input.");const t={audio:{deviceId:{exact:e}},video:!1};try{const a=(await navigator.mediaDevices.getUserMedia(t)).getAudioTracks()[0],i=this.peerConnection.getSenders().find((e=>"audio"===e.track.kind));if(i){i.replaceTrack(a);i.track.stop()}else this.localStream.addTrack(a),await this._publishTracks();this._log(`Switched to audio input device: ${e}`)}catch(e){this._error("Error switching audio input device:",e)}}async selectVideoInputDevice(e){if(!e)return void this._warn("No deviceId provided for video input.");const t={video:{deviceId:{exact:e}},audio:!1};try{const a=(await navigator.mediaDevices.getUserMedia(t)).getVideoTracks()[0],i=this.peerConnection.getSenders().find((e=>"video"===e.track.kind));if(i){i.replaceTrack(a);i.track.stop()}else this.localStream.addTrack(a),await this._publishTracks();this._log(`Switched to video input device: ${e}`)}catch(e){this._error("Error switching video input device:",e)}}async selectAudioOutputDevice(e){if(e)try{const t=document.querySelectorAll("audio");for(const a of t)await a.setSinkId(e);this.currentAudioOutputDeviceId=e,this._log(`Switched to audio output device: ${e}`)}catch(e){this._error("Error switching audio output device:",e)}else this._warn("No deviceId provided for audio output.")}async previewMedia({audioDeviceId:e,videoDeviceId:t},a=null){const i={audio:!!e&&{deviceId:{exact:e}},video:!!t&&{deviceId:{exact:t}}};try{const e=await navigator.mediaDevices.getUserMedia(i);return a&&(a.srcObject=e),e}catch(e){throw this._error("Error previewing media:",e),e}}toggleMedia({video:e=null,audio:t=null}){if(this.localStream){if(null!==e){this.localStream.getVideoTracks().forEach((t=>{t.enabled=e;const a=this.peerConnection?.getSenders().find((e=>e.track===t));a&&this._updateTrackStatus(a.track.id,"video",e)}))}if(null!==t){this.localStream.getAudioTracks().forEach((e=>{e.enabled=t;const a=this.peerConnection?.getSenders().find((t=>t.track===e));a&&this._updateTrackStatus(a.track.id,"audio",t)}))}}}async shareScreen(){try{await this.unpublishAllTracks("video");const e=(await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!1})).getVideoTracks()[0];this.localStream.addTrack(e),await this._publishTracks(),e.onended=async()=>{await this.unpublishAllTracks(),await this._cleanupEndedTracks(),this.localStream=await navigator.mediaDevices.getUserMedia({video:!0,audio:!0}),this._log("Re-acquired local media"),await this._publishTracks()}}catch(e){throw this._error("Error sharing screen:",e),e}}_sendWebSocketMessage(e){this.ws&&this.ws.readyState===WebSocket.OPEN?(this.ws.send(JSON.stringify(e)),this._log("Sent WebSocket message:",e)):this._warn("WebSocket is not open. Cannot send message.")}async listParticipants(){if(!this.roomId)return this._warn("Not connected to any room.");return(await this._fetch(`${this.backendUrl}/api/rooms/${this.roomId}/participants`).then((e=>e.json()))).participants||[]}_generateUUID(){return"xxxx-xxxx-xxxx-xxxx".replace(/[x]/g,(()=>(16*Math.random()|0).toString(16)))}async unpublishAllTracks(e,t=!1){if(!this.peerConnection)return void this._warn("PeerConnection is not established.");let a=this.peerConnection.getSenders();e&&(a=a.filter((t=>t.track&&t.track.kind===e))),this._log("Unpublishing all tracks:",a.length);const i=await this.peerConnection.createOffer();await this.peerConnection.setLocalDescription(i);for(const e of a)if(e.track)try{const a=e.track.id,s=this.peerConnection.getTransceivers().find((t=>t.sender===e)),o=s?s.mid:null;if(this._log("Unpublishing track:",{trackId:a,mid:o}),!o){this._warn("No mid found for track:",a);continue}e.track.stop(),await this._fetch(`${this.backendUrl}/api/rooms/${this.roomId}/sessions/${this.sessionId}/unpublish`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({trackName:a,mid:o,force:t,sessionDescription:{type:i.type,sdp:i.sdp}})}),this.peerConnection.removeTrack(e),this.publishedTracks.delete(a),await this._cleanupEndedTracks(),this._log(`Successfully unpublished track: ${a}`)}catch(e){this._error("Error unpublishing track:",e)}}async getSessionState(){if(!this.sessionId)return this._warn("No active session");try{const e=await this._fetch(`${this.backendUrl}/api/rooms/${this.roomId}/sessions/${this.sessionId}/state`),t=await e.json();return t.tracks&&(this.trackStates=new Map(t.tracks.map((e=>[e.trackName,e.status])))),t}catch(e){throw this._error("Error getting session state:",e),e}}async getTrackStatus(e){const t=await this.getSessionState();return t.tracks.find((t=>t.trackName===e))?.status}async _updateTrackStatus(e,t,a){try{const i=`${this.backendUrl}/api/rooms/${this.roomId}/sessions/${this.sessionId}/track-status`,s=await this._fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({trackId:e,kind:t,enabled:a,force:!1})}),o=await s.json();if(o.errorCode)throw new Error(o.errorDescription||"Unknown error updating track status");return o.requiresImmediateRenegotiation&&await this._renegotiate(),o.errorCode||this._updateTrackState(e,a?"enabled":"disabled"),o}catch(e){throw this._error("Error updating track status:",e),e}}_handleError(e){if(e.errorCode){const t=new Error(e.errorDescription||"Unknown error");throw t.code=e.errorCode,t}return e}async getUserInfo(e=null){try{const t=await this._fetch(`${this.backendUrl}/api/users/${e||"me"}`);return await t.json()}catch(e){throw this._error("Error getting user info:",e),e}}_handleWebSocketMessage(e){try{const t=JSON.parse(e.data);switch(this._log("WebSocket message received:",t),this._wsMessageHandlers.forEach((e=>{try{e(t)}catch(e){this._error("Error in WebSocket message handler:",e)}})),t.type){case"participant-joined":this._onParticipantJoinedCallback&&this._onParticipantJoinedCallback(t.payload);break;case"participant-left":this._onParticipantLeftCallback&&this._onParticipantLeftCallback(t.payload.sessionId);break;case"track-published":this._onRemoteTrackCallback&&this._onRemoteTrackCallback(t.payload);break;case"track-unpublished":this._onRemoteTrackUnpublishedCallback&&this._onRemoteTrackUnpublishedCallback(t.payload.sessionId,t.payload.trackName);break;case"track-status-changed":this._onTrackStatusChangedCallback&&this._onTrackStatusChangedCallback(t.payload);break;case"data-message":this._onDataMessageCallback&&this._onDataMessageCallback(t.payload);break;case"room-metadata-updated":this._onRoomMetadataUpdatedCallback&&this._onRoomMetadataUpdatedCallback(t.payload);break;default:this._log("Unhandled message type:",t.type)}}catch(e){this._error("Error handling WebSocket message:",e)}}_updateTrackState(e,t){this.trackStates||(this.trackStates=new Map),this.trackStates.set(e,t)}async listRooms(){return(await this._fetch(`${this.backendUrl}/api/rooms`).then((e=>e.json()))).rooms}async updateRoomMetadata(e){return this.roomId?await this._fetch(`${this.backendUrl}/api/rooms/${this.roomId}/metadata`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((e=>e.json())):this._warn("Not connected to any room")}async sendDataToAll(e){if(!this.roomId||!this.sessionId)throw new Error("Must be in a room to send data");if(!this.ws||this.ws.readyState!==WebSocket.OPEN)throw new Error("WebSocket connection not available");this.ws.send(JSON.stringify({type:"data-message",payload:{from:this.sessionId,message:e}}))}setMediaQuality(t){if("string"==typeof t){const a=e.QUALITY_PRESETS[t];if(!a)return this._warn(`Unknown quality preset: ${t}`);this.mediaQuality=t,t=a}this.mediaQuality={video:{...this.mediaQuality.video,...t.video},audio:{...this.mediaQuality.audio,...t.audio}},this.pendingQualitySettings=this.mediaQuality,this.peerConnection&&this._applyQualitySettings()}async _applyQualitySettings(){if(!this.peerConnection)return;const e=this.peerConnection.getSenders();for(const t of e){if(!t.track)continue;const e=t.getParameters();e.encodings||(e.encodings=[{}]);const a=t.track.kind,i=this.mediaQuality[a];if(i.maxBitrate&&(e.encodings[0].maxBitrate=i.maxBitrate),"video"===a){const e={width:i.width,height:i.height,frameRate:i.frameRate};await t.track.applyConstraints(e)}await t.setParameters(e)}}startStatsMonitoring(e=1e3){"monitoring"!==this.statsMonitoringState&&(this.statsMonitoringState="monitoring",this.statsInterval=setInterval((async()=>{if(!this.peerConnection)return;const e=await this._gatherConnectionStats(),t=await this._gatherStreamStats();this._onConnectionStatsCallback&&this._onConnectionStatsCallback(e,t)}),e))}stopStatsMonitoring(){this.statsInterval&&(clearInterval(this.statsInterval),this.statsInterval=null),this.statsMonitoringState="stopped"}onConnectionStats(e){this._onConnectionStatsCallback=e}async _gatherConnectionStats(){if(!this.peerConnection)return this._warn("No active connection");const e=await this.peerConnection.getStats(),t={outbound:{bitrate:0,packetLoss:0,qualityLimitation:"none"},inbound:{bitrate:0,packetLoss:0,jitter:0},connection:{roundTripTime:0,state:this.peerConnection.connectionState}};let a=null,i=null;if(e.forEach((e=>{switch(e.type){case"outbound-rtp":"video"===e.kind&&(a=e,t.outbound.qualityLimitation=e.qualityLimitationReason);break;case"inbound-rtp":"video"===e.kind&&(i=e,t.inbound.jitter=e.jitter,e.packetsLost>0&&(t.inbound.packetLoss=e.packetsLost/(e.packetsReceived+e.packetsLost)*100));break;case"candidate-pair":"succeeded"===e.state&&(t.connection.roundTripTime=e.currentRoundTripTime)}})),this.previousStats&&a&&i){const e=(a.timestamp-this.previousStats.outboundTimestamp)/1e3;if(e>0){const s=a.bytesSent-this.previousStats.bytesSent;t.outbound.bitrate=8*s/e;const o=i.bytesReceived-this.previousStats.bytesReceived;t.inbound.bitrate=8*o/e}}return a&&i&&(this.previousStats={outboundTimestamp:a.timestamp,bytesSent:a.bytesSent,bytesReceived:i.bytesReceived}),t}async getConnectionStats(){return this._gatherConnectionStats()}async _gatherStreamStats(){if(!this.peerConnection)return new Map;const e=await this.peerConnection.getStats(),t=new Map;return this.sessionId&&t.set(this.sessionId,{sessionId:this.sessionId,packetLoss:0,qualityLimitation:"none",bitrate:0}),e.forEach((e=>{if("outbound-rtp"===e.type&&"video"===e.kind){const a=t.get(this.sessionId);a&&(a.qualityLimitation=e.qualityLimitationReason,a.bitrate=8*e.bytesSent/e.timestamp)}else if("inbound-rtp"===e.type&&"video"===e.kind){const a=e.mid,i=this.midToSessionId.get(a);i&&t.set(i,{sessionId:i,packetLoss:e.packetsLost>0?e.packetsLost/(e.packetsReceived+e.packetsLost)*100:0,qualityLimitation:"none",bitrate:8*e.bytesReceived/e.timestamp})}})),t}static QUALITY_PRESETS={high_16x9_xl:{video:{width:{ideal:1920},height:{ideal:1080},frameRate:{ideal:30},maxBitrate:25e5},audio:{maxBitrate:128e3,sampleRate:48e3,channelCount:2}},high_16x9_lg:{video:{width:{ideal:1280},height:{ideal:720},frameRate:{ideal:30},maxBitrate:15e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:2}},high_16x9_md:{video:{width:{ideal:854},height:{ideal:480},frameRate:{ideal:30},maxBitrate:8e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},high_16x9_sm:{video:{width:{ideal:640},height:{ideal:360},frameRate:{ideal:30},maxBitrate:6e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},high_16x9_xs:{video:{width:{ideal:480},height:{ideal:270},frameRate:{ideal:30},maxBitrate:4e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_16x9_xl:{video:{width:{ideal:1920},height:{ideal:1080},frameRate:{ideal:24},maxBitrate:2e6},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:2}},medium_16x9_lg:{video:{width:{ideal:1280},height:{ideal:720},frameRate:{ideal:24},maxBitrate:12e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},medium_16x9_md:{video:{width:{ideal:854},height:{ideal:480},frameRate:{ideal:24},maxBitrate:6e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_16x9_sm:{video:{width:{ideal:640},height:{ideal:360},frameRate:{ideal:20},maxBitrate:4e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},medium_16x9_xs:{video:{width:{ideal:480},height:{ideal:270},frameRate:{ideal:20},maxBitrate:3e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_16x9_xl:{video:{width:{ideal:1920},height:{ideal:1080},frameRate:{ideal:15},maxBitrate:15e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},low_16x9_lg:{video:{width:{ideal:1280},height:{ideal:720},frameRate:{ideal:15},maxBitrate:8e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_16x9_md:{video:{width:{ideal:854},height:{ideal:480},frameRate:{ideal:15},maxBitrate:4e5},audio:{maxBitrate:32e3,sampleRate:44100,channelCount:1}},low_16x9_sm:{video:{width:{ideal:640},height:{ideal:360},frameRate:{ideal:12},maxBitrate:25e4},audio:{maxBitrate:32e3,sampleRate:22050,channelCount:1}},low_16x9_xs:{video:{width:{ideal:480},height:{ideal:270},frameRate:{ideal:10},maxBitrate:15e4},audio:{maxBitrate:24e3,sampleRate:22050,channelCount:1}},high_4x3_xl:{video:{width:{ideal:960},height:{ideal:720},frameRate:{ideal:30},maxBitrate:15e5},audio:{maxBitrate:128e3,sampleRate:48e3,channelCount:2}},high_4x3_lg:{video:{width:{ideal:640},height:{ideal:480},frameRate:{ideal:30},maxBitrate:8e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},high_4x3_md:{video:{width:{ideal:480},height:{ideal:360},frameRate:{ideal:30},maxBitrate:6e5},audio:{maxBitrate:96e3,sampleRate:44100,channelCount:1}},high_4x3_sm:{video:{width:{ideal:320},height:{ideal:240},frameRate:{ideal:30},maxBitrate:4e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},high_4x3_xs:{video:{width:{ideal:240},height:{ideal:180},frameRate:{ideal:30},maxBitrate:25e4},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_4x3_xl:{video:{width:{ideal:960},height:{ideal:720},frameRate:{ideal:24},maxBitrate:12e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},medium_4x3_lg:{video:{width:{ideal:640},height:{ideal:480},frameRate:{ideal:24},maxBitrate:6e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_4x3_md:{video:{width:{ideal:480},height:{ideal:360},frameRate:{ideal:20},maxBitrate:4e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},medium_4x3_sm:{video:{width:{ideal:320},height:{ideal:240},frameRate:{ideal:20},maxBitrate:3e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},medium_4x3_xs:{video:{width:{ideal:240},height:{ideal:180},frameRate:{ideal:20},maxBitrate:2e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_4x3_xl:{video:{width:{ideal:960},height:{ideal:720},frameRate:{ideal:15},maxBitrate:8e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_4x3_lg:{video:{width:{ideal:640},height:{ideal:480},frameRate:{ideal:15},maxBitrate:4e5},audio:{maxBitrate:32e3,sampleRate:44100,channelCount:1}},low_4x3_md:{video:{width:{ideal:480},height:{ideal:360},frameRate:{ideal:12},maxBitrate:25e4},audio:{maxBitrate:32e3,sampleRate:22050,channelCount:1}},low_4x3_sm:{video:{width:{ideal:320},height:{ideal:240},frameRate:{ideal:10},maxBitrate:15e4},audio:{maxBitrate:24e3,sampleRate:22050,channelCount:1}},low_4x3_xs:{video:{width:{ideal:240},height:{ideal:180},frameRate:{ideal:10},maxBitrate:1e5},audio:{maxBitrate:24e3,sampleRate:22050,channelCount:1}},high_1x1_xl:{video:{width:{ideal:720},height:{ideal:720},frameRate:{ideal:30},maxBitrate:15e5},audio:{maxBitrate:128e3,sampleRate:48e3,channelCount:2}},high_1x1_lg:{video:{width:{ideal:480},height:{ideal:480},frameRate:{ideal:30},maxBitrate:8e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},high_1x1_md:{video:{width:{ideal:360},height:{ideal:360},frameRate:{ideal:30},maxBitrate:6e5},audio:{maxBitrate:96e3,sampleRate:44100,channelCount:1}},high_1x1_sm:{video:{width:{ideal:240},height:{ideal:240},frameRate:{ideal:30},maxBitrate:4e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},high_1x1_xs:{video:{width:{ideal:180},height:{ideal:180},frameRate:{ideal:30},maxBitrate:25e4},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_1x1_xl:{video:{width:{ideal:720},height:{ideal:720},frameRate:{ideal:24},maxBitrate:12e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},medium_1x1_lg:{video:{width:{ideal:480},height:{ideal:480},frameRate:{ideal:24},maxBitrate:6e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_1x1_md:{video:{width:{ideal:360},height:{ideal:360},frameRate:{ideal:20},maxBitrate:4e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},medium_1x1_sm:{video:{width:{ideal:240},height:{ideal:240},frameRate:{ideal:20},maxBitrate:3e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},medium_1x1_xs:{video:{width:{ideal:180},height:{ideal:180},frameRate:{ideal:20},maxBitrate:2e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_1x1_xl:{video:{width:{ideal:720},height:{ideal:720},frameRate:{ideal:15},maxBitrate:8e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_1x1_lg:{video:{width:{ideal:480},height:{ideal:480},frameRate:{ideal:15},maxBitrate:4e5},audio:{maxBitrate:32e3,sampleRate:44100,channelCount:1}},low_1x1_md:{video:{width:{ideal:360},height:{ideal:360},frameRate:{ideal:12},maxBitrate:25e4},audio:{maxBitrate:32e3,sampleRate:22050,channelCount:1}},low_1x1_sm:{video:{width:{ideal:240},height:{ideal:240},frameRate:{ideal:10},maxBitrate:15e4},audio:{maxBitrate:24e3,sampleRate:22050,channelCount:1}},low_1x1_xs:{video:{width:{ideal:180},height:{ideal:180},frameRate:{ideal:10},maxBitrate:1e5},audio:{maxBitrate:24e3,sampleRate:22050,channelCount:1}},high_9x16_xl:{video:{width:{ideal:1080},height:{ideal:1920},frameRate:{ideal:30},maxBitrate:25e5},audio:{maxBitrate:128e3,sampleRate:48e3,channelCount:2}},high_9x16_lg:{video:{width:{ideal:720},height:{ideal:1280},frameRate:{ideal:30},maxBitrate:15e5},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},high_9x16_md:{video:{width:{ideal:480},height:{ideal:854},frameRate:{ideal:30},maxBitrate:8e5},audio:{maxBitrate:96e3,sampleRate:44100,channelCount:1}},high_9x16_sm:{video:{width:{ideal:360},height:{ideal:640},frameRate:{ideal:30},maxBitrate:6e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},high_9x16_xs:{video:{width:{ideal:270},height:{ideal:480},frameRate:{ideal:30},maxBitrate:4e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_9x16_xl:{video:{width:{ideal:1080},height:{ideal:1920},frameRate:{ideal:24},maxBitrate:2e6},audio:{maxBitrate:96e3,sampleRate:48e3,channelCount:1}},medium_9x16_lg:{video:{width:{ideal:720},height:{ideal:1280},frameRate:{ideal:24},maxBitrate:12e5},audio:{maxBitrate:64e3,sampleRate:44100,channelCount:1}},medium_9x16_md:{video:{width:{ideal:480},height:{ideal:854},frameRate:{ideal:20},maxBitrate:6e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},medium_9x16_sm:{video:{width:{ideal:360},height:{ideal:640},frameRate:{ideal:20},maxBitrate:4e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},medium_9x16_xs:{video:{width:{ideal:270},height:{ideal:480},frameRate:{ideal:20},maxBitrate:3e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_9x16_xl:{video:{width:{ideal:1080},height:{ideal:1920},frameRate:{ideal:15},maxBitrate:15e5},audio:{maxBitrate:48e3,sampleRate:44100,channelCount:1}},low_9x16_lg:{video:{width:{ideal:720},height:{ideal:1280},frameRate:{ideal:15},maxBitrate:8e5},audio:{maxBitrate:32e3,sampleRate:44100,channelCount:1}},low_9x16_md:{video:{width:{ideal:480},height:{ideal:854},frameRate:{ideal:12},maxBitrate:4e5},audio:{maxBitrate:32e3,sampleRate:22050,channelCount:1}},low_9x16_sm:{video:{width:{ideal:360},height:{ideal:640},frameRate:{ideal:10},maxBitrate:25e4},audio:{maxBitrate:24e3,sampleRate:22050,channelCount:1}},low_9x16_xs:{video:{width:{ideal:270},height:{ideal:480},frameRate:{ideal:10},maxBitrate:15e4},audio:{maxBitrate:24e3,sampleRate:22050,channelCount:1}}}}return e}));
